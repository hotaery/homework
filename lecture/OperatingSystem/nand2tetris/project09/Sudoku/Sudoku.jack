class Sudoku {
    field Board _board;

    constructor Sudoku new(int shift) {
        let _board = Board.new(shift);
        do Sudoku.initBoard(_board);
        return this;
    }

    function void initBoard(Board board) {
        do board.set(0, 0, 8);
        do board.set(1, 0, 3);
        do board.set(2, 0, 5);
        do board.set(3, 0, 1);
        do board.set(8, 0, 4);

        do board.set(3, 1, 4);
        do board.set(4, 1, 3);
        do board.set(5, 1, 8);
        
        do board.set(0, 2, 1);
        do board.set(4, 2, 5);
        do board.set(6, 2, 6);
        do board.set(7, 2, 8);

        do board.set(1, 3, 5);
        do board.set(4, 3, 9);
        do board.set(7, 3, 6);
        
        do board.set(4, 4, 2);
        do board.set(5, 4, 7);
        do board.set(8, 4, 1);

        do board.set(0, 5, 4);
        do board.set(1, 5, 2);
        do board.set(6, 5, 7);

        do board.set(2, 6, 8);
        do board.set(3, 6, 7);
        do board.set(5, 6, 3);
        do board.set(7, 6, 1);

        do board.set(2, 7, 4);
        do board.set(3, 7, 2);
        do board.set(8, 7, 6);

        do board.set(0, 8, 5);
        do board.set(2, 8, 3);
        do board.set(6, 8, 8);
        do board.set(7, 8, 4);
        return;
    }

    method void dispose() {
        do _board.dispose();
        do Memory.dealloc(this);
        return;
    }

    method boolean check(int val) {
        var int x, y, i, j, cellVal;
        let x = _board.getCurrentX();
        let y = _board.getCurrentY();
        let i = 0;
        while (i < 9) {
            let cellVal = _board.get(x, i);
            if (cellVal = val) {
                return false;
            }
            let i = i + 1;
        }
        let i = 0;
        while (i < 9) {
            let cellVal = _board.get(i, y);
            if (cellVal = val) {
                return false;
            }
            let i = i + 1;
        }
        let x = (x / 3) * 3;
        let y = (y / 3) * 3;
        let i = 0;
        let j = 0;
        while (i < 3) {
            while (j < 3) {
                let cellVal = _board.get(x + i, y + j);
                if (cellVal = val) {
                    return false;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return true;
    }

    method void run() {
        var int key;
        var int val;
        var boolean notExit, win;
        let notExit = true;
        let win = false;
        do _board.draw();
        while ((~(win)) & notExit) {
            do _board.drawCurrentCell();
            let win = _board.allFilled();
            let key = Keyboard.keyPressed();
            if (~(key = 0)) {
                do Sys.wait(100);
            }
            if (key = 140) {        // ESC
                let notExit = false;
            } 
            if (key = 130) {
                do _board.moveLeft();
            } 
            if (key = 131) {
                do _board.moveUp();
            }
            if (key = 132) {
                do _board.moveRight();
            }
            if (key = 133) {
                do _board.moveDown();
            }
            if ((key = 129) | (key = 48)) {
                let val = _board.getCurrent();
                do _board.setCurrent(0);
            }
            if ((key > 48) & (key < 58)) {
                let val = key - 48;
                if (check(val)) {
                    do _board.setCurrent(val);
                }
            }
            do Sys.wait(50);
        }
        do Screen.clearScreen();
        if (~(win)) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
        } else {
            do Output.moveCursor(10,27);
            do Output.printString("You Win!");
        }
        return;
    }
}