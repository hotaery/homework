// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not(in=instruction[15], out=AInstru);
    Or(a=AInstru, b=instruction[5], out=ALoad);
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=AData);
    ARegister(in=AData, load=ALoad, out=A, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=DLoad);
    DRegister(in=ALUOut, load=DLoad, out=X);
    Mux16(a=A, b=inM, sel=instruction[12], out=Y);
    ALU(x=X, y=Y, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zr, ng=ng);
    And(a=instruction[15], b=instruction[3], out=writeM); 
    
    And(a=instruction[2], b=ng, out=jumpIfNegative1);
    And(a=instruction[15], b=jumpIfNegative1, out=jumpIfNegative);
    And(a=instruction[1], b=zr, out=jumpIfZero1);
    And(a=instruction[15], b=jumpIfZero1, out=jumpIfZero);
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=jumpIfPositive1);
    And(a=instruction[0], b=jumpIfPositive1, out=jumpIfPositive2);
    And(a=instruction[15], b=jumpIfPositive2, out=jumpIfPositive);

    Or(a=jumpIfNegative, b=jumpIfZero, out=jump1);
    Or(a=jump1, b=jumpIfPositive, out=jump2);
    Not(in=jump2, out=inc1);
    Not(in=reset, out=notReset);
    And(a=jump2, b=notReset, out=jump);
    And(a=inc1, b=notReset, out=inc);
    PC(in=A, inc=inc, load=jump, reset=reset, out[0..14]=pc);
}
